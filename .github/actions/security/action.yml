name: Scan Package using Trivy
description: Scans a Docker image from GitHub Packages with Trivy

inputs:
  image-ref:
    description: Reference to the Docker image (e.g., ghcr.io/owner/repo/image:tag)
    required: true
  sarif-output:
    description: Path for the SARIF output file
    required: true

runs:
  using: "composite"
  steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ inputs.image-ref }}
        scan-type: image
        format: sarif
        output: ${{ inputs.sarif-output }}
        severity: CRITICAL,HIGH,MEDIUM #enough?too much??
        exit-code: 0
        ignore-unfixed: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.sarif-output }}

    - name: Generate SBOM # sweet! does it do licensing also? hmm
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ inputs.image-ref }}
        scan-type: image
        format: spdx
        output: sbom-results.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-results
        path: sbom-results.json
        retention-days: 10

#maybe?? sji and also maybe generate github issues for CVE's?  mikepenz/action-jira-github-issue-sync (github.rest.issues.create)
#- name: Comment Trivy results on PR
#  if: github.event_name == 'pull_request'
#  uses: actions/github-script@v7
#  with:
#    script: |
#      const fs = require('fs');
#      const sarif = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));

#      const results = sarif.runs?.[0]?.results || [];
#      if (results.length === 0) {
#        core.info("No vulnerabilities found.");
#        return;
#      }

#      const summary = results.map(result => {
#        const level = result.level.toUpperCase();
#        const msg = result.message?.text || '';
#        const ruleId = result.ruleId || '';
#        return `- **[${level}]** ${ruleId}: ${msg}`;
#      }).slice(0, 10).join('\n'); // Limit to 10 results

#      const body = `### üõ°Ô∏è Trivy Vulnerability Scan Report\n${summary}\n\n_See full report in SARIF artifact._`;

#      await github.rest.issues.createComment({
#        issue_number: context.issue.number,
#        owner: context.repo.owner,
#        repo: context.repo.repo,
#        body,
#      });
