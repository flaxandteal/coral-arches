name: Build Arches project
run-name: Build Arches project

on:
  push:
    branches:
      - develop

env:
  # Using the 7.5-bug version of the container is throwing an error for an
  # undefined database column using the previous coral base and postgis seems
  # to have avoided the problem. TODO: Investigate difference between the two
  # ARCHES_BASE: ghcr.io/flaxandteal/arches-base-7.5-dev:bug-coral_dockerfile_for_arches_7.4
  # ARCHES_POSTGIS: ghcr.io/flaxandteal/arches-postgis-7.5-dev:bug-coral_dockerfile_for_arches_7.4

  ARCHES_BASE: flaxandteal/arches_coral_base
  ARCHES_POSTGIS: flaxandteal/arches_coral_postgres
  ARCHES_PROJECT: coral
jobs:
  update-version:
    runs-on: [self-hosted]

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Check Branch
        id: check-branch
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "Push event is on the 'develop' branch."
            echo "::set-output name=on_develop::true"
          else
            echo "Push event is not on the 'develop' branch. Skipping version update."
            echo "::set-output name=on_develop::false"
          fi

      - name: Pull latest
        id: pull-latest
        if: steps.check-branch.outputs.on_develop == 'true'
        run: |
          git pull
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read Existing Version
        id: read-version
        if: steps.check-branch.outputs.on_develop == 'true'
        run: |
          python_file="./coral/coral/settings.py"
          current_version=$(grep -oE "APP_VERSION = '[0-9]+\.[0-9]+\.[0-9]+'" "$python_file" | cut -d"'" -f2)
          echo "Current Version: $current_version"
          echo "::set-output name=current_version::$current_version"

      - name: Determine New Version
        id: determine-version
        if: steps.check-branch.outputs.on_develop == 'true'
        run: |
          merge_message="${{ github.event.head_commit.message }}"
          current_version="${{ steps.read-version.outputs.current_version }}"

          if [[ $merge_message =~ "feature" ]]; then
            new_version=$(echo "$current_version" | awk -F'.' -v OFS='.' '{$2 = $2 + 1; print}')
          elif [[ $merge_message =~ "bug" ]]; then
            new_version="${current_version:0:1}.$(echo $current_version | cut -d'.' -f2).$(( ${current_version##*.} + 1 ))"
          elif [[ $merge_message =~ "release" ]]; then
            new_version="$(( ${current_version%%.*} + 1 )).0.0"
          else
            new_version="$current_version"
          fi

          echo "New Version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Update Python File
        id: update-python-file
        if: steps.check-branch.outputs.on_develop == 'true'
        run: |
          python_file="./coral/coral/settings.py"
          new_version="${{ steps.determine-version.outputs.new_version }}"
          sed -i "s/APP_VERSION = '.*'/APP_VERSION = '$new_version'/" "$python_file"

      - name: Commit and Push Changes
        id: commit-changes
        if: steps.check-branch.outputs.on_develop == 'true' && steps.read-version.outputs.current_version != steps.determine-version.outputs.new_version
        run: |
          python_file="./coral/coral/settings.py"
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add "$python_file"
          git commit -m "Version: ${{ steps.determine-version.outputs.new_version }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Build-Arches:
    runs-on: [self-hosted]
    needs: [update-version]
    outputs:
      project-base: ${{ steps['set-base'].outputs['project-base'] }}
      project-postgis: ${{ steps['set-base'].outputs['project-postgis'] }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Pull latest
        run: |
          echo "Pulling latest to include workflow commits."
          git pull
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders
      # name: Build docker backend image
      # run: |
      #   docker build --build-arg ARCHES_BASE=${{ env.ARCHES_BASE }} --build-arg ARCHES_PROJECT=${{ env.ARCHES_PROJECT }} . -t arches_${{ env.ARCHES_PROJECT }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: flaxandteal/arches_${{ env.ARCHES_PROJECT }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ARCHES_BASE=${{ env.ARCHES_BASE }}
            ARCHES_PROJECT=${{ env.ARCHES_PROJECT }}

      - name: Record a project base image reference
        id: set-base
        run: |
          export PROJECT_BASE=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          export PROJECT_POSTGIS=${{ env.ARCHES_POSTGIS }}
          echo "PROJECT_BASE=$PROJECT_BASE" >> $GITHUB_ENV
          echo "::set-output name=project-base::$PROJECT_BASE"
          echo "::set-output name=project-postgis::$PROJECT_POSTGIS"
  Build-Arches-Static:
    runs-on: [self-hosted]
    needs: [Build-Arches]
    container:
      image: docker:dind
    env:
      PROJECT_BASE: ${{ needs['Build-Arches'].outputs['project-base'] }}
    outputs:
      project-static: ${{ steps['set-static'].outputs['project-static'] }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Pull latest
        run: |
          echo "Pulling latest to include workflow commits."
          git pull
      # name: Build docker backend image
      # run: |
      #   docker build --build-arg VERSION=feature-ci --build-arg ARCHES_BASE=${{ env.ARCHES_BASE }} --build-arg ARCHES_PROJECT=${{ env.ARCHES_PROJECT }} -f Dockerfile.static . -t arches_${{ env.ARCHES_PROJECT }}_static
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders
          buildkitd-flags: '--allow-insecure-entitlement network.host'
          driver-opts: |
            network=host
      - name: Wait for service availability
        run: docker run --rm --network host willwill/wait-for-it -h localhost -p 8000 -t 0
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: flaxandteal/arches_${{ env.ARCHES_PROJECT }}-static
      - name: Log docker image version
        run: |
          echo ${{ steps.meta.outputs.version }}
      - name: Build and push Docker image
        id: buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile.static
          network: host
          allow: network.host
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PROJECT_BASE=${{ env.PROJECT_BASE }}
            ARCHES_ENVIRONMENT=development
            ARCHES_BASE=${{ env.ARCHES_BASE }}
            ARCHES_PROJECT=${{ env.ARCHES_PROJECT }}
            ARCHES_NAMESPACE_FOR_DATA_EXPORT=http://localhost:8000/
      - name: Record a project static image reference
        id: set-static
        run: |
          export PROJECT_STATIC=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          echo "PROJECT_STATIC=$PROJECT_STATIC" >> $GITHUB_ENV
          echo "::set-output name=project-static::$PROJECT_STATIC"
    services:
      elasticsearch:
        image: elasticsearch:8.4.0
        ports:
          - '9200:9200'
          - '9300:9300'
        env:
          TZ: 'PST'
          discovery.type: 'single-node'
          discovery.seed_hosts: '[]'
          xpack.security.enabled: 'false'
          ES_JAVA_OPTS: '-Xms400m -Xmx400m'
        options: >-
          --health-cmd "curl -s --fail http://localhost:9200/_cat/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      db:
        image: ${{ needs['Build-Arches'].outputs['project-postgis'] }}
        #volumes:
        #    - ${{ github.workspace }}/scripts/init-unix.sql:/docker-entrypoint-initdb.d/init.sql # to set up the DB template
        ports:
          - '5432:5432'
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASS: postgres
          POSTGRES_DB: postgres
          POSTGRES_MULTIPLE_EXTENSIONS: postgis,postgis_topology
          TZ: PST
        options: >-
          --health-cmd "pg_isready -h 127.0.0.1 -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

      arches:
        image: ${{ needs['Build-Arches'].outputs['project-base'] }}
        env:
          ARCHES_PROJECT: '${{ env.ARCHES_PROJECT }}'
          ARCHES_ROOT: '/web_root/arches'
          COMPRESS_OFFLINE: 'False'
          COMPRESS_ENABLED: 'False'
          INSTALL_DEFAULT_GRAPHS: 'False'
          INSTALL_DEFAULT_CONCEPTS: 'False'
          PGUSERNAME: 'postgres'
          PGPASSWORD: 'postgres'
          PGDBNAME: 'arches'
          PGHOST: 'db'
          PGPORT: '5432'
          COUCHDB_HOST: 'couchdb'
          COUCHDB_PORT: '5984'
          COUCHDB_USER: 'admin'
          COUCHDB_PASS: 'password'
          ESHOST: 'elasticsearch'
          ESPORT: '9200'
          CELERY_BROKER_URL: 'amqp://rabbitmq'
          DJANGO_MODE: 'DEV'
          DJANGO_DEBUG: 'True'
          DOMAIN_NAMES: 'localhost'
          PYTHONUNBUFFERED: '0'
          STATIC_URL: '/static/'
          STATIC_ROOT: '/static_root'
          WEB_ROOT: '/web_root'
          TZ: 'PST'
        ports:
          - '8000:8000'
        options: >-
          --health-cmd "curl --fail http://localhost:8000/templates/views/components/language-switcher.htm || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 1000
  Build-Arches-Final:
    needs: [Build-Arches-Static, Build-Arches]
    runs-on: [self-hosted]
    container:
      image: docker:dind
    env:
      PROJECT_BASE: ${{ needs['Build-Arches'].outputs['project-base'] }}
      PROJECT_STATIC: ${{ needs['Build-Arches-Static'].outputs['project-static'] }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Pull latest
        run: |
          echo "Pulling latest to include workflow commits."
          git pull
      # name: Build docker backend image
      # run: |
      #   docker build --build-arg VERSION=feature-ci --build-arg ARCHES_BASE=${{ env.ARCHES_BASE }} --build-arg ARCHES_PROJECT=${{ env.ARCHES_PROJECT }} -f Dockerfile.static . -t arches_${{ env.ARCHES_PROJECT }}_static
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders
          buildkitd-flags: '--allow-insecure-entitlement network.host'
          driver-opts: |
            network=host
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: flaxandteal/arches_${{ env.ARCHES_PROJECT }}-static-py
      - name: Build and push Docker image
        id: buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile.static-py
          network: host
          allow: network.host
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PROJECT_BASE=${{ env.PROJECT_BASE }}
            PROJECT_STATIC=${{ env.PROJECT_STATIC }}
            ARCHES_BASE=${{ env.ARCHES_BASE }}
            ARCHES_PROJECT=${{ env.ARCHES_PROJECT }}
  Test-Arches:
    runs-on: [self-hosted]
    needs: [Build-Arches-Final, Build-Arches, Build-Arches-Static]
    env:
      HOME: ''
      CYPRESS_BASE_URL: http://arches:8000
    container:
      image: cypress/included:11.2.0
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Pull latest
        run: |
          echo "Pulling latest to include workflow commits."
          git pull
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          browser: firefox
          install: false
          wait-on: 'http://arches:8000'
          wait-on-timeout: 6000
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
    services:
      elasticsearch:
        image: elasticsearch:8.4.0
        ports:
          - '9200:9200'
          - '9300:9300'
        env:
          TZ: 'PST'
          discovery.type: 'single-node'
          discovery.seed_hosts: '[]'
          xpack.security.enabled: 'false'
          ES_JAVA_OPTS: '-Xms400m -Xmx400m'
        options: >-
          --health-cmd "curl -s --fail http://localhost:9200/_cat/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      db:
        image: ${{ needs['Build-Arches'].outputs['project-postgis'] }}
        #volumes:
        #    - ${{ github.workspace }}/scripts/init-unix.sql:/docker-entrypoint-initdb.d/init.sql # to set up the DB template
        ports:
          - '5432:5432'
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASS: postgres
          POSTGRES_DB: postgres
          POSTGRES_MULTIPLE_EXTENSIONS: postgis,postgis_topology
          TZ: PST
        options: >-
          --health-cmd "pg_isready -h 127.0.0.1 -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

      arches:
        image: ${{ needs['Build-Arches'].outputs['project-base'] }}
        env:
          ARCHES_PROJECT: '${{ env.ARCHES_PROJECT }}'
          COMPRESS_OFFLINE: 'False'
          INSTALL_CORAL_PACKAGE: 'True'
          INSTALL_DEFAULT_GRAPHS: 'False'
          INSTALL_DEFAULT_CONCEPTS: 'False'
          PGUSERNAME: 'postgres'
          PGPASSWORD: 'postgres'
          PGDBNAME: 'arches'
          PGHOST: 'db'
          PGPORT: '5432'
          COUCHDB_HOST: 'couchdb'
          COUCHDB_PORT: '5984'
          COUCHDB_USER: 'admin'
          COUCHDB_PASS: 'password'
          ESHOST: 'elasticsearch'
          ESPORT: '9200'
          CELERY_BROKER_URL: 'amqp://rabbitmq'
          DJANGO_MODE: 'DEV'
          DJANGO_DEBUG: 'True'
          DOMAIN_NAMES: 'arches'
          PYTHONUNBUFFERED: '0'
          TZ: 'PST'
        ports:
          - '8000:8000'
        options: >-
          --health-cmd "curl --fail http://localhost:8000/templates/views/components/language-switcher.htm || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 1000
